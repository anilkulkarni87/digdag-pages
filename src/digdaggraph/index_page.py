
from dataclasses import dataclass
from pathlib import Path
from html import escape
from typing import List
from .html_theme import dark_base_css
from .constants import SCHEDULE_INDEX_FILE
from .constants import UNSCHEDULED_INDEX_FILE  

def _esc(s: str) -> str:
    return escape(s, quote=False)

def _esca(s: str) -> str:
    return escape(s, quote=True)

@dataclass
class ScheduleEntry:
    project: str
    workflow: str
    schedule_text: str
    href: str

def write_scheduled_workflows(entries: List[ScheduleEntry], out_path: str = SCHEDULE_INDEX_FILE) -> None:
    projects = sorted(set(e.project for e in entries))
    entries_sorted = sorted(entries, key=lambda e: (e.project, e.workflow))

    def _row(e: ScheduleEntry) -> str:
        wf_clean = e.workflow.replace(".dig", "")
        return (
            f"<tr data-project='{_esca(e.project)}'>"
            f"<td class='c-project'>{_esc(e.project)}</td>"
            f"<td class='c-workflow'><a href='{_esca(e.href)}'>{_esc(wf_clean)}</a></td>"
            f"<td class='c-schedule'><code>{_esc(e.schedule_text)}</code></td>"
            "</tr>"
        )

    rows_html = "".join(_row(e) for e in entries_sorted)
    options_html = "<option value=''>All projects</option>" + "".join(
        f"<option value='{_esca(p)}'>{_esc(p)}</option>" for p in projects
    )

    doc = (
        "<!doctype html><html lang='en'><head>"
        "<meta charset='utf-8'><title>Scheduled Workflows</title>"
        "<meta name='viewport' content='width=device-width, initial-scale=1'>"
        f"<style>{dark_base_css()}"
        "table{width:100%;border-collapse:separate;border-spacing:0;overflow:hidden;"
        "border:1px solid var(--border);border-radius:12px;background:var(--panel)}"
        "thead th{position:sticky;top:0;background:var(--panel);border-bottom:1px solid var(--border);"
        "text-align:left;padding:12px;font-weight:600}"
        "tbody tr{background:#101219}"
        "tbody tr:nth-child(even){background:#0e1017}"
        "tbody td{padding:12px;border-bottom:1px solid var(--border);vertical-align:top}"
        "tbody tr:hover{background:#131826}"
        "code{background:#0f1117;padding:2px 6px;border-radius:6px;display:inline-block;white-space:pre-wrap;word-break:break-word}"
        ".controls{display:flex;gap:12px;align-items:center;margin-top:8px;flex-wrap:wrap}"
        ".controls input[type='search'], .controls select{background:#0f1117;color:var(--text);border:1px solid var(--border);"
        "border-radius:8px;padding:10px 12px;outline:none}"
        ".badge{background:#1f2937;border:1px solid #2c3342;border-radius:999px;padding:2px 8px;font-size:12px}"
        ".c-project{width:18%}.c-workflow{width:25%}.c-schedule{width:57%}"
        "</style></head><body>"
        "<header><div class='wrap'><h1>Scheduled Workflows</h1>"
        "<div class='muted'>Search and filter schedules generated from your Digdag projects.</div>"
        "<p style='margin:10px 0'><a class='button' href='./unscheduled_workflows.html'>Unscheduled workflows</a></p>"
        "<div class='controls'>"
        "<input id='q' type='search' placeholder='Search workflows, projects, schedule text…'>"
        f"<select id='proj'>{options_html}</select>"
        "<span class='badge' id='count'></span>"
        "</div></div></header>"
        "<main class='wrap'><table id='tbl'><thead><tr>"
        "<th>Project</th><th>Workflow</th><th>Schedule</th>"
        "</tr></thead><tbody>"
        f"{rows_html}"
        "</tbody></table></main>"
        "<footer class='wrap muted' style='font-size:12px;padding-bottom:28px'>"
        "Generated by <code>digdaggraph</code></footer>"
        "<script>(function(){"
        "const q=document.getElementById('q');const proj=document.getElementById('proj');"
        "const tbody=document.querySelector('#tbl tbody');const count=document.getElementById('count');"
        "const rows=Array.from(tbody.querySelectorAll('tr'));"
        "function norm(s){return (s||'').toLowerCase();}"
        "function apply(){const term=norm(q.value);const pf=proj.value;let visible=0;"
        "rows.forEach(tr=>{const projName=tr.getAttribute('data-project');"
        "const text=norm(tr.innerText);const matchesProj=!pf||projName===pf;"
        "const matchesText=!term||text.includes(term);if(matchesProj&&matchesText){tr.style.display='';visible++;}"
        "else{tr.style.display='none';}});count.textContent=visible+' shown';}"
        "q.addEventListener('input',apply);proj.addEventListener('change',apply);apply();"
        "})();</script>"
        "</body></html>"
    )
    Path(out_path).write_text(doc, encoding="utf-8")



def write_unscheduled_workflows(entries: list[ScheduleEntry], out_path: str = UNSCHEDULED_INDEX_FILE) -> None:
    """
    Render a dark, searchable index of workflows that DO NOT declare a top-level `schedule:`.
    Uses ScheduleEntry(project, workflow, schedule_text, href) but ignores schedule_text.
    """
    # Collect projects and sort
    projects = sorted(set(e.project for e in entries))
    entries_sorted = sorted(entries, key=lambda e: (e.project, e.workflow))

    def _row(e: ScheduleEntry) -> str:
        wf_clean = e.workflow.replace(".dig", "")
        return f"""<tr data-project="{_esca(e.project)}">
          <td class="c-project">{_esc(e.project)}</td>
          <td class="c-workflow"><a href="{_esca(e.href)}">{_esc(wf_clean)}</a></td>
          <td class="c-notes"><span class="badge">no schedule</span></td>
        </tr>"""

    rows_html = "\n".join(_row(e) for e in entries_sorted)
    options_html = '<option value="">All projects</option>\n' + "\n".join(
        f'<option value="{_esca(p)}">{_esc(p)}</option>' for p in projects
    )

    doc = f"""<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Unscheduled Workflows</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>{dark_base_css()}
  a.button{{display:inline-block;margin-right:8px;padding:8px 10px;border-radius:10px;border:1px solid var(--border);background:#1f2937;color:var(--text)}}
  table{{width:100%;border-collapse:separate;border-spacing:0;overflow:hidden;
         border:1px solid var(--border);border-radius:12px;background:var(--panel)}}
  thead th{{position:sticky;top:0;background:var(--panel);border-bottom:1px solid var(--border);
           text-align:left;padding:12px;font-weight:600}}
  tbody tr{{background:#101219}}
  tbody tr:nth-child(even){{background:#0e1017}}
  tbody td{{padding:12px;border-bottom:1px solid var(--border);vertical-align:top}}
  tbody tr:hover{{background:#131826}}
  .controls{{display:flex;gap:12px;align-items:center;margin-top:8px;flex-wrap:wrap}}
  .controls input[type="search"], .controls select{{
    background:#0f1117;color:var(--text);border:1px solid var(--border);border-radius:8px;
    padding:10px 12px;outline:none
  }}
  .badge{{background:#1f2937;border:1px solid #2c3342;border-radius:999px;padding:2px 8px;font-size:12px}}
  .c-project{{width:25%}} .c-workflow{{width:45%}} .c-notes{{width:30%}}
</style>
</head>
<body>

<header>
  <div class="wrap">
    <h1>Unscheduled Workflows</h1>
    <div class="muted">Workflows that do not define a top-level <code>schedule:</code>.</div>
    <p style="margin:10px 0">
      <a class="button" href="./scheduled_workflows.html">← Scheduled index</a>
    </p>
    <div class="controls">
      <input id="q" type="search" placeholder="Search project or workflow…">
      <select id="proj">
        {options_html}
      </select>
      <span class="badge" id="count"></span>
    </div>
  </div>
</header>

<main class="wrap">
  <table id="tbl">
    <thead>
      <tr>
        <th>Project</th>
        <th>Workflow</th>
        <th>Notes</th>
      </tr>
    </thead>
    <tbody>
      {rows_html}
    </tbody>
  </table>
</main>

<footer class="wrap muted" style="font-size:12px;padding-bottom:28px">
  Generated by <code>digdag-pages</code>
</footer>

<script>
(function() {{
  const q = document.getElementById('q');
  const proj = document.getElementById('proj');
  const tbody = document.querySelector('#tbl tbody');
  const count = document.getElementById('count');
  const rows = Array.from(tbody.querySelectorAll('tr'));

  function norm(s) {{ return (s||'').toLowerCase(); }}

  function apply() {{
    const term = norm(q.value);
    const pf = proj.value;
    let visible = 0;

    rows.forEach(tr => {{
      const projName = tr.getAttribute('data-project');
      const text = norm(tr.innerText);
      const matchesProj = !pf || projName === pf;
      const matchesText = !term || text.includes(term);
      if (matchesProj && matchesText) {{ tr.style.display = ''; visible++; }}
      else {{ tr.style.display = 'none'; }}
    }});
    count.textContent = visible + ' shown';
  }}

  q.addEventListener('input', apply);
  proj.addEventListener('change', apply);
  apply();
}})();
</script>

</body>
</html>
"""
    Path(out_path).write_text(doc, encoding="utf-8")

